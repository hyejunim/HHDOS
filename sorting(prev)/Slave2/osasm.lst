


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4 solution, 3/9/17
    6 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
    7 00000000         
    8 00000000                 AREA             globals
    9 00000000                 IMPORT           runPt
   10 00000000                 IMPORT           runPt_next
   11 00000000         
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 REQUIRE8
   15 00000000                 PRESERVE8
   16 00000000         
   17 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   18 00000000                 EXTERN           NextThreadPt ; next thread to r
                                                            un, set by schedule
                                                            
   19 00000000                 EXPORT           StartOS
   20 00000000                 EXPORT           ContextSwitch
   21 00000000                 EXPORT           PendSV_Handler
   22 00000000         
   23 00000000                 IMPORT           OS_Id
   24 00000000                 IMPORT           OS_Sleep
   25 00000000                 IMPORT           OS_Kill
   26 00000000                 IMPORT           OS_Time
   27 00000000                 IMPORT           OS_AddThread
   28 00000000         
   29 00000000         
   30 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   31 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   32 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   33 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   34 00000000 000000FF 



ARM Macro Assembler    Page 2 


                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   35 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000                 EXPORT           StartOS
   40 00000000         StartOS
   41 00000000 4826            LDR              R0, =runPt  ;currently running 
                                                            thread
   42 00000002 6801            LDR              R1, [R0]    ; R1 = value of run
                                                            Pt
   43 00000004 F8D1 D000       LDR              SP, [R1]    ;new thread SP, SP 
                                                            = runPt->sp;
   44 00000008 E8BD 0FF0       POP              {R4-R11}    ; restore registers
                                                             R4~R11
   45 0000000C BC0F            POP              {R0-R3}     ; restore registers
                                                             R0~R3
   46 0000000E F85D CB04       POP              {R12}       ; restore registers
                                                             R12
   47 00000012 B001            ADD              SP, SP, #4  ; discard LR from i
                                                            nitial stack
   48 00000014 F85D EB04       POP              {LR}        ; start location
   49 00000018 B001            ADD              SP, SP, #4  ; discard PSR from 
                                                            initial stack
   50 0000001A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   51 0000001C 4770            BX               LR          ; start first threa
                                                            d
   52 0000001E         
   53 0000001E         
   54 0000001E         
   55 0000001E         OSStartHang
   56 0000001E E7FE            B                OSStartHang ; Should never get 
                                                            here
   57 00000020         
   58 00000020         
   59 00000020         ;*******************************************************
                       *************************************************
   60 00000020         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   61 00000020         ;                                           void Context
                       Switch(void)
   62 00000020         ;
   63 00000020         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   64 00000020         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   65 00000020         ;*******************************************************
                       *************************************************
   66 00000020         
   67 00000020         ContextSwitch
   68 00000020 481F            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 



ARM Macro Assembler    Page 3 


                                                            (causes context swi
                                                            tch)
   69 00000022 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   70 00000026 6001            STR              R1, [R0]
   71 00000028 4770            BX               LR
   72 0000002A         
   73 0000002A         
   74 0000002A         ;*******************************************************
                       *************************************************
   75 0000002A         ;                                         HANDLE PendSV 
                       EXCEPTION
   76 0000002A         ;                                     void OS_CPU_PendSV
                       Handler(void)
   77 0000002A         ;
   78 0000002A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   79 0000002A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
   80 0000002A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   81 0000002A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   82 0000002A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   83 0000002A         ;              a thread or occurs due to an interrupt or
                        exception.
   84 0000002A         ;
   85 0000002A         ;           2) Pseudo-code is:
   86 0000002A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   87 0000002A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   88 0000002A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   89 0000002A         ;              d) Call OSTaskSwHook();
   90 0000002A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   91 0000002A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   92 0000002A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   93 0000002A         ;              h) Restore R4-R11 from new process stack;
                       
   94 0000002A         ;              i) Perform exception return which will re
                       store remaining context.
   95 0000002A         ;
   96 0000002A         ;           3) On entry into PendSV handler:
   97 0000002A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   98 0000002A         ;                 xPSR, PC, LR, R12, R0-R3
   99 0000002A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  100 0000002A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  101 0000002A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  102 0000002A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  103 0000002A         ;



ARM Macro Assembler    Page 4 


  104 0000002A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  105 0000002A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  106 0000002A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  107 0000002A         ;*******************************************************
                       *************************************************
  108 0000002A         
  109 0000002A                 EXPORT           PendSV_Handler
  110 0000002A         PendSV_Handler
  111 0000002A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  112 0000002C E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r0-11 
  113 00000030 481A            LDR              R0, =runPt  ; R0=pointer to Run
                                                            Pt, old thread
  114 00000032 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
  115 00000034 F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
  116 00000038         
  117 00000038 4B1A            LDR              R3, =runPt_next ; R3 is address
                                                             of runPt_next
  118 0000003A 681A            LDR              R2, [R3]    ; R2 = next Thread 
                                                            address
  119 0000003C 6002            STR              R2, [R0]    ; save R2 value to 
                                                            runPt
  120 0000003E         
  121 0000003E 6851            LDR              R1, [R2,#4] ; R2 = next Thread 
                                                            address
  122 00000040 6019            STR              R1, [R3]    ;update runPt_next 
                                                            value
  123 00000042         
  124 00000042 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  125 00000046 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  126 0000004A         
  127 0000004A B662            CPSIE            I           ; tasks run with I=
                                                            0
  128 0000004C 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  129 0000004E         
  130 0000004E         
  131 0000004E         ;*******************************************************
                       ***********************
  132 0000004E         ; normal OS_Wait and OS_Signal 
  133 0000004E         ;*******************************************************
                       ***********************
  134 0000004E         ;EXPORT OS_Wait
  135 0000004E         ;OS_Wait
  136 0000004E         ;LDREX R1, [R0]     ; counter. assume that the address o
                       f semaphore is in R1 initially
  137 0000004E         ;SUBS R1, #1     ; counter -1



ARM Macro Assembler    Page 5 


  138 0000004E         ;ITT  PL      ; next two instructions are conditional, o
                       k if  >=0
  139 0000004E         ;STREXPL R2, R1, [R0] ; try update 
  140 0000004E         ;CMPPL R2, #0     ; succeed? (If R2 is 0, load-store suc
                       cessful)
  141 0000004E         ;BNE  OS_Wait    ; no, try again
  142 0000004E         ;BX  LR
  143 0000004E         
  144 0000004E         
  145 0000004E         ;EXPORT OS_Signal
  146 0000004E         ;OS_Signal
  147 0000004E         ;LDREX R1, [R0]     ; counter. assume that the address o
                       f semaphore is in R1 initially
  148 0000004E         ;ADD  R1, #1     ; counter +1
  149 0000004E         ;STREX R2, R1, [R0]  ; try update
  150 0000004E         ;CMP  R2, #0     ; succeed?
  151 0000004E         ;BNE  OS_Signal   ; no, try again
  152 0000004E         ;BX  LR
  153 0000004E         
  154 0000004E                 EXPORT           SVC_Handler
  155 0000004E         SVC_Handler
  156 0000004E         ;SVC_Handler automatically push and pop
  157 0000004E         ;  R0-R3, R12, LR, PSR, return address
  158 0000004E         ; OS_Id #0, OS_Kill #1, OS_Sleep #2, OS_Time #3, OS_AddT
                       hread #4
  159 0000004E         
  160 0000004E F8DD C018       LDR              R12, [SP, #24] ; return address
                                                            
  161 00000052 F83C CC02       LDRH             R12, [R12, #-2] ; SVC instructi
                                                            on is 2 bytes (LDRH
                                                            : H means, unsigned
                                                             halfword, zero ext
                                                            end to 32 bits on l
                                                            oads)
  162 00000056 F42C 4C7F       BIC              R12, #0xFF00 ; Extract ID in R1
                                                            2 (BIC: bit clear)
  163 0000005A E89D 000F       LDM              SP, {R0-R3} ; Get any parameter
                                                            s (LDM: load multip
                                                            le registers, SP is
                                                             the base register,
                                                             R0-R3 is loaded)
  164 0000005E         
  165 0000005E         ; MOV  R12, #1
  166 0000005E B500            PUSH             {LR}
  167 00000060 F1BC 0F00       CMP              R12, #0     ; OS_Id
  168 00000064 BF08 F7FF 
              FFFE             BLEQ             OS_Id
  169 0000006A F1BC 0F01       CMP              R12, #1     ; OS_Kill
  170 0000006E BF08 F7FF 
              FFFE             BLEQ             OS_Kill
  171 00000074 F1BC 0F02       CMP              R12, #2     ; OS_Sleep
  172 00000078 BF08 F7FF 
              FFFE             BLEQ             OS_Sleep
  173 0000007E F1BC 0F03       CMP              R12, #3     ; OS_Time
  174 00000082 BF08 F7FF 
              FFFE             BLEQ             OS_Time
  175 00000088 F1BC 0F04       CMP              R12, #4     ; OS_AddThread
  176 0000008C BF08 F7FF 
              FFFE             BLEQ             OS_AddThread



ARM Macro Assembler    Page 6 


  177 00000092         
  178 00000092 F85D EB04       POP              {LR}
  179 00000096 9000            STR              R0, [SP]    ; store return valu
                                                            e
  180 00000098 4770            BX               LR          ; return from excep
                                                            tion
  181 0000009A         
  182 0000009A         
  183 0000009A         
  184 0000009A 00 00           ALIGN
  185 0000009C                 END
              00000000 
              E000ED04 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\obj\os
asm.d -o.\obj\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\K
eil\ARM\Inc\Luminary --list=.\osasm.lst ..\lib\OS\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

globals 00000000

Symbol: globals
   Definitions
      At line 8 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: globals unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000020

Symbol: ContextSwitch
   Definitions
      At line 67 in file ..\lib\OS\osasm.s
   Uses
      At line 20 in file ..\lib\OS\osasm.s
Comment: ContextSwitch used once
OSStartHang 0000001E

Symbol: OSStartHang
   Definitions
      At line 55 in file ..\lib\OS\osasm.s
   Uses
      At line 56 in file ..\lib\OS\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000002A

Symbol: PendSV_Handler
   Definitions
      At line 110 in file ..\lib\OS\osasm.s
   Uses
      At line 21 in file ..\lib\OS\osasm.s
      At line 109 in file ..\lib\OS\osasm.s

SVC_Handler 0000004E

Symbol: SVC_Handler
   Definitions
      At line 155 in file ..\lib\OS\osasm.s
   Uses
      At line 154 in file ..\lib\OS\osasm.s
Comment: SVC_Handler used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 40 in file ..\lib\OS\osasm.s
   Uses
      At line 19 in file ..\lib\OS\osasm.s
      At line 39 in file ..\lib\OS\osasm.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 6 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 30 in file ..\lib\OS\osasm.s
   Uses
      At line 68 in file ..\lib\OS\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 33 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 34 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 35 in file ..\lib\OS\osasm.s
   Uses
      At line 69 in file ..\lib\OS\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 31 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 32 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NextThreadPt 00000000

Symbol: NextThreadPt
   Definitions
      At line 18 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: NextThreadPt unused
OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 27 in file ..\lib\OS\osasm.s
   Uses
      At line 176 in file ..\lib\OS\osasm.s
Comment: OS_AddThread used once
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 23 in file ..\lib\OS\osasm.s
   Uses
      At line 168 in file ..\lib\OS\osasm.s
Comment: OS_Id used once
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 25 in file ..\lib\OS\osasm.s
   Uses
      At line 170 in file ..\lib\OS\osasm.s
Comment: OS_Kill used once
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 24 in file ..\lib\OS\osasm.s
   Uses
      At line 172 in file ..\lib\OS\osasm.s
Comment: OS_Sleep used once
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 26 in file ..\lib\OS\osasm.s
   Uses
      At line 174 in file ..\lib\OS\osasm.s
Comment: OS_Time used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 17 in file ..\lib\OS\osasm.s
   Uses
      None
Comment: RunPt unused
runPt 00000000

Symbol: runPt



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 9 in file ..\lib\OS\osasm.s
   Uses
      At line 41 in file ..\lib\OS\osasm.s
      At line 113 in file ..\lib\OS\osasm.s

runPt_next 00000000

Symbol: runPt_next
   Definitions
      At line 10 in file ..\lib\OS\osasm.s
   Uses
      At line 117 in file ..\lib\OS\osasm.s
Comment: runPt_next used once
9 symbols
355 symbols in table
